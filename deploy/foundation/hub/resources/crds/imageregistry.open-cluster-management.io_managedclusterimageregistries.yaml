
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: managedclusterimageregistries.imageregistry.open-cluster-management.io
spec:
  group: imageregistry.open-cluster-management.io
  names:
    kind: ManagedClusterImageRegistry
    listKind: ManagedClusterImageRegistryList
    plural: managedclusterimageregistries
    singular: managedclusterimageregistry
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ManagedClusterImageRegistry represents the image overridden configuration information.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the information of the ManagedClusterImageRegistry.
            properties:
              placementRef:
                description: PlacementRef is the referred Placement name.
                properties:
                  group:
                    description: Group is the api group of the placement. Current group is cluster.open-cluster-management.io.
                    enum:
                    - cluster.open-cluster-management.io
                    type: string
                  name:
                    description: Name is the name of the Placement.
                    type: string
                  resource:
                    description: Resource is the resource type of the Placement. Current resource is placement or placements.
                    enum:
                    - placement
                    - placements
                    type: string
                required:
                - group
                - name
                - resource
                type: object
              pullSecret:
                description: PullSecret is the name of image pull secret which should be in the same namespace with the managedClusterImageRegistry.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              registries:
                description: Registries includes the mirror and source registries. The source registry will be replaced by the Mirror. The larger index will work if the Sources are the same.
                items:
                  properties:
                    mirror:
                      description: Mirror is the mirrored registry of the Source. Will be ignored if Mirror is empty.
                      type: string
                    source:
                      description: Source is the source registry. All image registries will be replaced by Mirror if Source is empty.
                      type: string
                  required:
                  - mirror
                  type: object
                type: array
              registry:
                description: Registry is the Mirror registry which will replace all images registries. will be ignored if Registries is not empty.
                type: string
            required:
            - placementRef
            - pullSecret
            type: object
          status:
            description: Status represents the desired status of the managedClusterImageRegistry.
            properties:
              conditions:
                description: Conditions contains condition information for a managedClusterImageRegistry
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
